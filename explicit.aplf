∇ R ← explicit train
:With ⎕ns''

 {⍎⍵ ,'←{⍺←⊢ ⋄ (pad⍣(⍬≢⍵)) ⍺,''',(⍵),''',⍵}'}¨⎕c ⎕a
 A B C←112358314594370 774156178538190 998752796516730

 :Trap 0
  aa ← ⍎train
 :Else
  R ← 2⍴⊂⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN)
  →0
 :EndTrap
 
 {⍎('∆',∘⍕⍵),'←{⍺←⊢ ⋄ (pad⍣(⍬≢⍵)) ⍺,''',(⎕ucs ⍵),''',⍵}'}¨2031⌶6
 {⍎('∆',1↓⍵),'←{⍺←⊢ ⋄ (pad⍣(⍬≢⍵)) ⍺,''',(     ⍵),''',⍵}'}¨2031⌶7
 {⍎('∆',1↓⍵),'←{v ← 0≠40 ⎕atx ''⍺'' ⋄ ⍺←⊢ ⋄ (pad⍣(⍬≢⍵)) ⍺,(pad (⍺⍺_o v),''',⍵,''',(⍵⍵_o v)),⍵}'}¨ '⎕OPT' '⎕R' '⎕S'

 ∆THIS ← { '⎕THIS' SIGNAL 'impossible' } 

 ⎕pp ← 34

 ⎕FIX 'file://',(2 ⎕NQ # 'GetEnvironment' 'DYALOG'),'/SALT/core/Utils.dyalog'
 repObj ← Utils.repObj

 dfn     ← '}',⍨'{',⊢(/⍨)∨∘⌽⍨⍤⍷⍨⍲∊∘'()' ⍝ Confused? https://tacit.help
 pad     ← '(',,∘')'
 flatten ← ⊃,/

 _apply ← { 
  ⍺←⊢
  (pad⍣(⍬≢⍵)) ⍺,(∊62 ⎕atx '⍺⍺'),⍵
  ⍺⍺ 
 }

 _o ← {
  ((1=1⊥'_apply'⍷∊)>1⊥'∆⍙'∊∊)62 ⎕atx '⍺⍺' : ⍺⍺ ⍬
  ⍵∧3.3=42 ⎕atx '⍺⍺' : dfn '⍺' ⍺⍺ '⍵'
  ⍵<3.3=42 ⎕atx '⍺⍺' : dfn     ⍺⍺ '⍵'
  ⍺⍺,⍬
 }
 
 _poke  ← {0::0 ⋄ f←⍎⍵ ⋄ ⍺⍺'f'}

 ∆xr ← 183⌶

 2 ⎕FIX'file://ns/At.aplf'
 2 ⎕FIX'file://ns/Backslash.aplf'
 2 ⎕FIX'file://ns/BackslashBar.aplf'
 2 ⎕FIX'file://ns/CircleDiaresis.aplf'
 2 ⎕FIX'file://ns/Diaeresis.aplf'
 2 ⎕FIX'file://ns/Dot.aplf'
 2 ⎕FIX'file://ns/Jot.aplf'
 2 ⎕FIX'file://ns/JotDiaeresis.aplf'
 2 ⎕FIX'file://ns/LeftBracket.aplf'
 2 ⎕FIX'file://ns/LeftTack.aplf'
 2 ⎕FIX'file://ns/QuadDiamond.aplf'
 2 ⎕FIX'file://ns/QuadEqual.aplf'
 2 ⎕FIX'file://ns/RightTack.aplf'
 2 ⎕FIX'file://ns/Signal.aplf'
 2 ⎕FIX'file://ns/Slash.aplf'
 2 ⎕FIX'file://ns/SlashBar.aplf'
 2 ⎕FIX'file://ns/StarDiaeresis.aplf'
 2 ⎕FIX'file://ns/TildeDiaeresis.aplf'

 tree ← (∆xr 'aa') {
    ⍙ ← pad ∘ flatten 1 ↓∘, ' ' ,⍤0 ∇¨
    1≤|≡⍺ : ⍺ ⍙ ⍵
    n ← ∊⍵
    ∨/(,∘⎕c⍨⎕a)∊n/⍨1⌽<\'←'⍷n : '(',n,')'
    3.2 ≡ 42∘⎕atx _poke n : '(',(n),'_apply)'
    '⎕'=1↑n : '∆',1↓n
        ⍺=2 : '(1 repObj ',(repObj ⍵),')'
       1≠⍴n : 3 4 ⍙ n⊂⍨∨∘⌽⍨n⍷n
        ⍺=3 : '∆',⍕⎕UCS n
        ⍺=4 : '⍙',⍕⎕UCS n
     '(⍕',(⍕⍵),')'
   } ⎕nr 'aa'

  f ← ⍎tree

  :If 4∊⎕nc'f'
   :Trap 0 ⋄ R ←⊂dfn   ('⍺⍺'f)'⍵' ⋄ :Else ⋄ R ←⊂⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN) ⋄ :EndTrap
   :Trap 0 ⋄ R,←⊂dfn'⍺'('⍺⍺'f)'⍵' ⋄ :Else ⋄ R,←⊂⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN) ⋄ :EndTrap
  :Else
   :Trap 0 ⋄ R ←⊂dfn   f'⍵' ⋄ :Else ⋄ R ←⊂⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN) ⋄ :EndTrap
   :Trap 0 ⋄ R,←⊂dfn'⍺'f'⍵' ⋄ :Else ⋄ R,←⊂⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN) ⋄ :EndTrap
  :EndIf

  R ← (⍕¨A B C)⎕R(,¨'ABC')⍠'Regex' 0¨R
:EndWith
∇