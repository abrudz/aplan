∇ exp ← explicit imp
     _Assign_ ← {⍺←⊢ ⋄ ⍎⍺,⍺⍺,⍵,⍵⍵}

     ns ← ⎕NS''

     {⍎'ns.',⍵,'←''',⍵,''''}¨⎕A

     {⍎'ns.',⍵,'←{}'}¨⎕c⎕a


     :Trap 0 ⋄ expr ← ns⍎imp ⋄ :EndTrap

     f∆ ← '!*+,-/<=>?\|~×÷↑↓∊∧∨∩∪≠≡≢≤≥⊂⊃⊆⊖⊤⊥⌈⌊⌷⌹⌽⌿⍀⍉⍋⍎⍒⍕⍟⍪⍱⍲⍳⍴⍷⍸○'
     m⍙ ← '&/\¨⌶⌸⌿⍀⍨'
     d⍙ ← '.@∘⌺⍠⍣⍤⍥['

     s∆ ← 2031⌶7
     s⍙ ← '⎕OPT' '⎕R' '⎕S'

     op    ← 4
     train ← 3.3
     dfn   ← 3.2
     fn    ← 3
     arr   ← 2

     ∆v  ← 900⌶
     ∆xr ← 183⌶

     Src  ← 62 ⎕ATX⊢
     Form ← 42 ⎕ATX⊢
     Role ← 40 ⎕ATX⊢

     idioms  ← '⊢/' ,⍥⊂ '∆8866' '⍙47'
     idioms ,← '⊣/' ,⍥⊂ '∆8867' '⍙47'
     idioms ,← '⊢⌿' ,⍥⊂ '∆8866' '⍙9023'
     idioms ,← '⊣⌿' ,⍥⊂ '∆8867' '⍙9023'
     idioms ,← ',/' ,⍥⊂ '∆44'   '⍙47'
     idioms ,← '⍪/' ,⍥⊂ '∆9066' '⍙47'

     Dfn  ← {('('≡⊣/⍵)∧')'≡⊢/⍵ : '{}'@((⊢∨⌽)⍷⍨)⍵ ⋄ '{',⍵,'}'}
     Pad  ← '(',,∘')'

     _Apply ← {
        ⍺←⊢
        (Pad⍣(⍬≢⍵))(⍺),(⊃⊆Src '⍺⍺'),(⍵)
        ⍺⍺
      }

     _Op ← {
            arr=Role '⍺⍺' : ⍺⍺
        (1=+/'_Apply'⍷s)>+/'∆⍙'∊s←∊Src '⍺⍺' : ⍺⍺ ⍬ ⍝ (⍨)
        ⍵∧train=Form '⍺⍺' : Dfn '⍺' ⍺⍺ '⍵'
        ⍵<train=Form '⍺⍺' : Dfn     ⍺⍺ '⍵'
        ⍺⍺ ⍬
      }

     _Poke  ← {0::0 ⋄ f←⍎⍵ ⋄ ⍺⍺'f'}

     Cover ← {
         0≠≡⍵:⍺ ∇¨⍵
         ⍵=arr:'(1 repObj ',(repObj ⍺),')'
         n ← ⊃⊆⍺
         '⎕'=1↑n:'∆',(1↓n)
         ∨/msk ← idioms∊⊆⍺: idioms/⍨¯1⌽msk

         ∨/msk ← (('←',⍨' '∘,)¨⎕c⎕a) (∨/⍷)¨⊆⍺ : '{⍺←⊢ ⋄ (Pad⍣(⍵≢⍬)) ⍺,''',(msk/⎕c⎕a),''',⍵}'

         dfn≡(Form)_Poke n:'(',n,'_Apply)'
         ⍵=op:'⍙',⍕⎕UCS n
         ⍵=fn:'∆',⍕⎕UCS n
     }

     f∆_n ← '∆',∘(⍕⎕UCS)¨f∆
     m⍙_n ← '⍙',∘(⍕⎕UCS)¨m⍙
     d⍙_n ← '⍙',∘(⍕⎕UCS)¨d⍙

     s∆_n ← {'∆',(1↓⍵)}¨s∆
     s⍙_n ← {'∆',(1↓⍵)}¨s⍙

     (s∆_n,f∆_n)('←{⍺←⊢ ⋄ (Pad⍣(⍬≢⍵))(⍺),'''_Assign_''',(⍵)}')¨s∆,f∆

     ∆8866 ← {⍺←⊢ ⋄ ⍵≡⍬:'⊢' ⋄ ⍺⊢⍵ }
     ∆8867 ← {⍺←⊢ ⋄ ⍵≡⍬:'⊣' ⋄ ⍺⊣⍵ }


          (m⍙_n)('←{⍺←⊢ ⋄ Pad ⍺,(Pad (⍺⍺_Op 1),'''_Assign_'''          ),⍵}')¨m⍙
     (s⍙_n,d⍙_n)('←{⍺←⊢ ⋄ Pad ⍺,(Pad (⍺⍺_Op 1),'''_Assign_''',(⍵⍵_Op 1)),⍵}')¨s⍙,d⍙

     syntax ← 2
     index  ← 3
     rank   ← 4
     length ← 5
     value  ← 6

     ⍙64 ← {
         v ← ×Role'⍺'
         ⍺←⊢
         Pad ⍺,(Pad(⍺⍺_Op⍨v),'@',(⍵⍵_Op⍨v)),⍵
     }

     ⍙168 ← {
         v ← ×Role'⍺'
         ⍺←⊢
         Pad ⍺,(Pad(⍺⍺_Op⍨v),'¨'),⍵
     }


     ⍙91 ← {
        v ← ×Role'⍺'
        ⍺←⊢
        arr ≠ Role '⍵⍵' : ⎕SIGNAL syntax
        Pad ⍺,(Pad (⍺⍺_Op v),'[',⍵⍵,']'),⍵
      }

     ⍙9060 ← {
         v ← ×Role'⍺'
         ⍺←⊢
         arr=Role '⍺⍺' : ⎕SIGNAL syntax
         arr=Role '⍵⍵' : Pad ⍺,(Pad(⍺⍺_Op v),'⍤',⍵⍵),⍵
         ⍺⍺ ⍺ ⍵⍵ ⍵
     }

     ⍙8728 ← {
         v ← ×Role'⍺'
         ⍺←⊢
         r ← arr=Role '⍺⍺'
         l ← arr=Role '⍵⍵'
           l∧r : ⎕SIGNAL syntax
         v∧l∨r : (0∘⊢)⍨⍬
         r : ⍺⍺ ⍵⍵  ⍵
         l : ⍵  ⍺⍺ ⍵⍵
         ⍺ ⍺⍺ ⍵⍵ ⍵
      }

     ⍙9061 ← {
         ⍺ ← {⍵ ⋄ ⍺⍺}
         arr=Role '⍺⍺' : ⎕SIGNAL syntax
         arr=Role '⍵⍵' : ⎕SIGNAL syntax
         (⍵⍵ ⍺) ⍺⍺ (⍵⍵ ⍵)
      }

     ⍙9064 ← {
         v ← ×Role'⍺'
         ⍺←⍵
         arr≠Role '⍺⍺' : ⍵ (⍺⍺⊣⊢) ⍺
         v∧'⍺⍺'≡⍺⍺ : (v⍴⍺),'(⍺⍺⍨)',⍵
      }

     ∆Outer ← {0=Role '⍺': ∘.×'' ⋄ Pad ⍺,(Pad '∘.',(⍺⍺_Op 1)),⍵}

     :If 0=×/⍴⎕nr'expr'
        v1 v2 ← 2⍴⊂'SYNTAX ERROR'
      :Else
           tree ← (⎕nr Cover ∆xr)'expr'
           tree ← { 2≥|≡⍵ : { 1 1 0≡⍵∊'∆⍙',∘(⍕⎕UCS)¨'∘.': (⊢/⍵) '∆Outer' ⋄ ⍵ } ⍵ ⋄ ∇¨⍵ }tree
           tree ←  ⍕{(1=≡)⍵ : ⍵ ⋄ Pad(∇¨⍵)}tree

        f ← ⍎tree
        :If 4.3 4.2 ∨.≡ Form 'f' ⋄ g ← '⍺⍺'f ⋄ :Else ⋄ g ← f ⋄ :EndIf

        :Trap 0
            v1←Dfn(g)'⍵'
        :Else
            v1←⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN)
        :EndTrap

        :Trap 0
            v2←Dfn'⍺'(g)'⍵'
        :Else
            v2←⎕DMX.(Message{⍵,⍺,⍨': '/⍨×≢⍺}⎕EM EN)
        :EndTrap

     :EndIf

     exp ← v1 v2
∇